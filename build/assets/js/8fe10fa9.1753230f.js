"use strict";(self.webpackChunkanimatix_pro_docs=self.webpackChunkanimatix_pro_docs||[]).push([[811],{1415:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"api/graph-executor-util","title":"GraphExecutorUtil","description":"The GraphExecutorUtil class provides static utility methods for controlling Animatix Pro animations programmatically. This is the main API for integrating Animatix Pro with your Unity scripts.","source":"@site/docs/api/graph-executor-util.md","sourceDirName":"api","slug":"/api/graph-executor-util","permalink":"/animatix-pro-docs/api/graph-executor-util","draft":false,"unlisted":false,"editUrl":"https://github.com/oodestudios/animatix-pro-docs/tree/main/docs/api/graph-executor-util.md","tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar"}');var t=r(4848),a=r(8453);const i={},o="GraphExecutorUtil",l={},h=[{value:"Overview",id:"overview",level:2},{value:"Methods",id:"methods",level:2},{value:"RunGraph",id:"rungraph",level:3},{value:"<code>RunGraph(GraphFlowAsset graphAsset)</code>",id:"rungraphgraphflowasset-graphasset",level:4},{value:"<code>RunGraph(string graphName)</code>",id:"rungraphstring-graphname",level:4},{value:"<code>RunGraph(GraphFlowAsset graphAsset, GameObject target)</code>",id:"rungraphgraphflowasset-graphasset-gameobject-target",level:4},{value:"Control Methods",id:"control-methods",level:3},{value:"<code>StopGraph(GraphFlowAsset graphAsset)</code>",id:"stopgraphgraphflowasset-graphasset",level:4},{value:"<code>PauseGraph(GraphFlowAsset graphAsset)</code>",id:"pausegraphgraphflowasset-graphasset",level:4},{value:"<code>ResumeGraph(GraphFlowAsset graphAsset)</code>",id:"resumegraphgraphflowasset-graphasset",level:4},{value:"<code>ResetGraph(GraphFlowAsset graphAsset)</code>",id:"resetgraphgraphflowasset-graphasset",level:4},{value:"Query Methods",id:"query-methods",level:3},{value:"<code>IsGraphRunning(GraphFlowAsset graphAsset)</code>",id:"isgraphrunninggraphflowasset-graphasset",level:4},{value:"<code>GetGraphProgress(GraphFlowAsset graphAsset)</code>",id:"getgraphprogressgraphflowasset-graphasset",level:4},{value:"<code>GetGraphDuration(GraphFlowAsset graphAsset)</code>",id:"getgraphdurationgraphflowasset-graphasset",level:4},{value:"Event Management",id:"event-management",level:3},{value:"<code>SubscribeToEvents(GraphFlowAsset graphAsset, IGraphEventListener listener)</code>",id:"subscribetoeventsgraphflowasset-graphasset-igrapheventlistener-listener",level:4},{value:"<code>UnsubscribeFromEvents(GraphFlowAsset graphAsset, IGraphEventListener listener)</code>",id:"unsubscribefromeventsgraphflowasset-graphasset-igrapheventlistener-listener",level:4},{value:"Complete Example",id:"complete-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Performance",id:"performance",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Code Organization",id:"code-organization",level:3},{value:"Related Classes",id:"related-classes",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"graphexecutorutil",children:"GraphExecutorUtil"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"GraphExecutorUtil"})," class provides static utility methods for controlling Animatix Pro animations programmatically. This is the main API for integrating Animatix Pro with your Unity scripts."]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"using AnimatixPro.GraphFlow;\r\n\r\npublic class GraphExecutorUtil\r\n{\r\n    // Main execution methods\r\n    public static void RunGraph(GraphFlowAsset graphAsset);\r\n    public static void RunGraph(string graphName);\r\n    public static void RunGraph(GraphFlowAsset graphAsset, GameObject target);\r\n    \r\n    // Control methods\r\n    public static void StopGraph(GraphFlowAsset graphAsset);\r\n    public static void PauseGraph(GraphFlowAsset graphAsset);\r\n    public static void ResumeGraph(GraphFlowAsset graphAsset);\r\n    public static void ResetGraph(GraphFlowAsset graphAsset);\r\n    \r\n    // Query methods\r\n    public static bool IsGraphRunning(GraphFlowAsset graphAsset);\r\n    public static float GetGraphProgress(GraphFlowAsset graphAsset);\r\n    public static float GetGraphDuration(GraphFlowAsset graphAsset);\r\n    \r\n    // Event management\r\n    public static void SubscribeToEvents(GraphFlowAsset graphAsset, IGraphEventListener listener);\r\n    public static void UnsubscribeFromEvents(GraphFlowAsset graphAsset, IGraphEventListener listener);\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"rungraph",children:"RunGraph"}),"\n",(0,t.jsx)(n.h4,{id:"rungraphgraphflowasset-graphasset",children:(0,t.jsx)(n.code,{children:"RunGraph(GraphFlowAsset graphAsset)"})}),"\n",(0,t.jsx)(n.p,{children:"Starts executing a GraphFlow animation."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph to execute"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\n\r\npublic class AnimationController : MonoBehaviour\r\n{\r\n    public GraphFlowAsset buttonAnimation;\r\n    \r\n    void Start()\r\n    {\r\n        // Start the animation\r\n        GraphExecutorUtil.RunGraph(buttonAnimation);\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"rungraphstring-graphname",children:(0,t.jsx)(n.code,{children:"RunGraph(string graphName)"})}),"\n",(0,t.jsx)(n.p,{children:"Starts executing a GraphFlow animation by name."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphName"})," (string): The name of the animation graph"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Start animation by name\r\nGraphExecutorUtil.RunGraph("ButtonHoverAnimation");\n'})}),"\n",(0,t.jsx)(n.h4,{id:"rungraphgraphflowasset-graphasset-gameobject-target",children:(0,t.jsx)(n.code,{children:"RunGraph(GraphFlowAsset graphAsset, GameObject target)"})}),"\n",(0,t.jsx)(n.p,{children:"Starts executing a GraphFlow animation with a specific target object."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph to execute"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"target"})," (GameObject): The target object for the animation"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public GraphFlowAsset scaleAnimation;\r\npublic GameObject targetObject;\r\n\r\nvoid AnimateObject()\r\n{\r\n    GraphExecutorUtil.RunGraph(scaleAnimation, targetObject);\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"control-methods",children:"Control Methods"}),"\n",(0,t.jsx)(n.h4,{id:"stopgraphgraphflowasset-graphasset",children:(0,t.jsx)(n.code,{children:"StopGraph(GraphFlowAsset graphAsset)"})}),"\n",(0,t.jsx)(n.p,{children:"Stops the execution of a running animation."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph to stop"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"void StopAnimation()\r\n{\r\n    GraphExecutorUtil.StopGraph(buttonAnimation);\r\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"pausegraphgraphflowasset-graphasset",children:(0,t.jsx)(n.code,{children:"PauseGraph(GraphFlowAsset graphAsset)"})}),"\n",(0,t.jsx)(n.p,{children:"Pauses the execution of a running animation."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph to pause"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"void PauseAnimation()\r\n{\r\n    GraphExecutorUtil.PauseGraph(buttonAnimation);\r\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"resumegraphgraphflowasset-graphasset",children:(0,t.jsx)(n.code,{children:"ResumeGraph(GraphFlowAsset graphAsset)"})}),"\n",(0,t.jsx)(n.p,{children:"Resumes a paused animation."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph to resume"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"void ResumeAnimation()\r\n{\r\n    GraphExecutorUtil.ResumeGraph(buttonAnimation);\r\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"resetgraphgraphflowasset-graphasset",children:(0,t.jsx)(n.code,{children:"ResetGraph(GraphFlowAsset graphAsset)"})}),"\n",(0,t.jsx)(n.p,{children:"Resets an animation to its initial state."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph to reset"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"void ResetAnimation()\r\n{\r\n    GraphExecutorUtil.ResetGraph(buttonAnimation);\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"query-methods",children:"Query Methods"}),"\n",(0,t.jsx)(n.h4,{id:"isgraphrunninggraphflowasset-graphasset",children:(0,t.jsx)(n.code,{children:"IsGraphRunning(GraphFlowAsset graphAsset)"})}),"\n",(0,t.jsx)(n.p,{children:"Checks if an animation is currently running."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"bool"}),": True if the animation is running, false otherwise"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'void Update()\r\n{\r\n    if (GraphExecutorUtil.IsGraphRunning(buttonAnimation))\r\n    {\r\n        Debug.Log("Animation is running!");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"getgraphprogressgraphflowasset-graphasset",children:(0,t.jsx)(n.code,{children:"GetGraphProgress(GraphFlowAsset graphAsset)"})}),"\n",(0,t.jsx)(n.p,{children:"Gets the current progress of a running animation."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"float"}),": Progress value between 0.0 and 1.0"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'void Update()\r\n{\r\n    float progress = GraphExecutorUtil.GetGraphProgress(buttonAnimation);\r\n    Debug.Log($"Animation progress: {progress * 100}%");\r\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"getgraphdurationgraphflowasset-graphasset",children:(0,t.jsx)(n.code,{children:"GetGraphDuration(GraphFlowAsset graphAsset)"})}),"\n",(0,t.jsx)(n.p,{children:"Gets the total duration of an animation."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph to check"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"float"}),": Total duration in seconds"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'float duration = GraphExecutorUtil.GetGraphDuration(buttonAnimation);\r\nDebug.Log($"Animation duration: {duration} seconds");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"event-management",children:"Event Management"}),"\n",(0,t.jsx)(n.h4,{id:"subscribetoeventsgraphflowasset-graphasset-igrapheventlistener-listener",children:(0,t.jsx)(n.code,{children:"SubscribeToEvents(GraphFlowAsset graphAsset, IGraphEventListener listener)"})}),"\n",(0,t.jsx)(n.p,{children:"Subscribes to animation events."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"listener"})," (IGraphEventListener): The event listener"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class AnimationListener : MonoBehaviour, IGraphEventListener\r\n{\r\n    void Start()\r\n    {\r\n        GraphExecutorUtil.SubscribeToEvents(buttonAnimation, this);\r\n    }\r\n    \r\n    public void OnAnimationStarted(string animationName)\r\n    {\r\n        Debug.Log($"Animation {animationName} started!");\r\n    }\r\n    \r\n    public void OnAnimationCompleted(string animationName)\r\n    {\r\n        Debug.Log($"Animation {animationName} completed!");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"unsubscribefromeventsgraphflowasset-graphasset-igrapheventlistener-listener",children:(0,t.jsx)(n.code,{children:"UnsubscribeFromEvents(GraphFlowAsset graphAsset, IGraphEventListener listener)"})}),"\n",(0,t.jsx)(n.p,{children:"Unsubscribes from animation events."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"graphAsset"})," (GraphFlowAsset): The animation graph"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"listener"})," (IGraphEventListener): The event listener"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"void OnDestroy()\r\n{\r\n    GraphExecutorUtil.UnsubscribeFromEvents(buttonAnimation, this);\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,t.jsx)(n.p,{children:"Here's a complete example showing how to use GraphExecutorUtil:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\n\r\npublic class CompleteAnimationExample : MonoBehaviour, IGraphEventListener\r\n{\r\n    [Header("Animation Assets")]\r\n    public GraphFlowAsset buttonHoverAnimation;\r\n    public GraphFlowAsset buttonClickAnimation;\r\n    public GraphFlowAsset buttonResetAnimation;\r\n    \r\n    [Header("Target Objects")]\r\n    public GameObject buttonObject;\r\n    public GameObject panelObject;\r\n    \r\n    void Start()\r\n    {\r\n        // Subscribe to events\r\n        GraphExecutorUtil.SubscribeToEvents(buttonHoverAnimation, this);\r\n        GraphExecutorUtil.SubscribeToEvents(buttonClickAnimation, this);\r\n    }\r\n    \r\n    void Update()\r\n    {\r\n        // Check if animations are running\r\n        if (GraphExecutorUtil.IsGraphRunning(buttonHoverAnimation))\r\n        {\r\n            float progress = GraphExecutorUtil.GetGraphProgress(buttonHoverAnimation);\r\n            Debug.Log($"Hover animation progress: {progress * 100}%");\r\n        }\r\n    }\r\n    \r\n    public void OnButtonHover()\r\n    {\r\n        // Start hover animation\r\n        GraphExecutorUtil.RunGraph(buttonHoverAnimation, buttonObject);\r\n    }\r\n    \r\n    public void OnButtonClick()\r\n    {\r\n        // Stop hover animation and start click animation\r\n        GraphExecutorUtil.StopGraph(buttonHoverAnimation);\r\n        GraphExecutorUtil.RunGraph(buttonClickAnimation, buttonObject);\r\n    }\r\n    \r\n    public void OnButtonRelease()\r\n    {\r\n        // Start reset animation\r\n        GraphExecutorUtil.RunGraph(buttonResetAnimation, buttonObject);\r\n    }\r\n    \r\n    // Event callbacks\r\n    public void OnAnimationStarted(string animationName)\r\n    {\r\n        Debug.Log($"Animation started: {animationName}");\r\n    }\r\n    \r\n    public void OnAnimationCompleted(string animationName)\r\n    {\r\n        Debug.Log($"Animation completed: {animationName}");\r\n        \r\n        // Chain animations\r\n        if (animationName == "ButtonClick")\r\n        {\r\n            // Show panel after button click\r\n            GraphExecutorUtil.RunGraph(buttonResetAnimation, panelObject);\r\n        }\r\n    }\r\n    \r\n    void OnDestroy()\r\n    {\r\n        // Clean up event subscriptions\r\n        GraphExecutorUtil.UnsubscribeFromEvents(buttonHoverAnimation, this);\r\n        GraphExecutorUtil.UnsubscribeFromEvents(buttonClickAnimation, this);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache GraphFlowAsset references"})," to avoid repeated lookups"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use object pooling"})," for frequently used animations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check IsGraphRunning"})," before starting new animations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unsubscribe from events"})," to prevent memory leaks"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check for null references"})," before calling methods"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validate GraphFlowAsset"})," before execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle exceptions"})," gracefully"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Log errors"})," for debugging"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"code-organization",children:"Code Organization"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use meaningful variable names"})," for clarity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Group related animations"})," together"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement proper cleanup"})," in OnDestroy"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document complex logic"})," with comments"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-classes",children:"Related Classes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"animatix-pro-controller",children:"AnimatixProController"})})," - Runtime controller for animations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"graph-flow-asset",children:"GraphFlowAsset"})})," - Animation asset management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"node-interfaces",children:"Node Interfaces"})})," - Custom node development"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"event-system",children:"Event System"})})," - Animation event handling"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Need more information?"})," Check out the ",(0,t.jsx)(n.a,{href:"animatix-pro-controller",children:"AnimatixProController"})," guide for advanced usage patterns!"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var s=r(6540);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);