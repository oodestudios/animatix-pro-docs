"use strict";(self.webpackChunkanimatix_pro_docs=self.webpackChunkanimatix_pro_docs||[]).push([[811],{1415:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api/graph-executor-util","title":"GraphExecutorUtil","description":"The GraphExecutorUtil class provides a static API for controlling Animatix Pro animations programmatically. This is the core interface for developers who want to trigger animations from their own scripts.","source":"@site/docs/api/graph-executor-util.md","sourceDirName":"api","slug":"/api/graph-executor-util","permalink":"/animatix-pro-docs/docs/api/graph-executor-util","draft":false,"unlisted":false,"editUrl":"https://github.com/oode-studios/animatix-pro-docs/tree/main/docs/api/graph-executor-util.md","tags":[],"version":"current","frontMatter":{},"sidebar":"apiSidebar"}');var a=r(4848),t=r(8453);const s={},l="GraphExecutorUtil",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"RunGraph",id:"rungraph",level:3},{value:"StopGraph",id:"stopgraph",level:3},{value:"ResetGraph",id:"resetgraph",level:3},{value:"IsGraphPlaying",id:"isgraphplaying",level:3},{value:"GetAllExecutorNames",id:"getallexecutornames",level:3},{value:"RunGraphAsync",id:"rungraphasync",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Basic Animation Control",id:"basic-animation-control",level:3},{value:"Animation Sequence",id:"animation-sequence",level:3},{value:"Event-Driven Animation",id:"event-driven-animation",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Classes",id:"related-classes",level:2}];function h(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"graphexecutorutil",children:"GraphExecutorUtil"})}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"GraphExecutorUtil"})," class provides a static API for controlling Animatix Pro animations programmatically. This is the core interface for developers who want to trigger animations from their own scripts."]}),"\n",(0,a.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\n\r\n// Play an animation\r\nGraphExecutorUtil.RunGraph("MyAnimation");\r\n\r\n// Check if animation is playing\r\nbool isPlaying = GraphExecutorUtil.IsGraphPlaying("MyAnimation");\r\n\r\n// Stop an animation\r\nGraphExecutorUtil.StopGraph("MyAnimation");\n'})}),"\n",(0,a.jsx)(e.h2,{id:"static-methods",children:"Static Methods"}),"\n",(0,a.jsx)(e.h3,{id:"rungraph",children:"RunGraph"}),"\n",(0,a.jsx)(e.p,{children:"Starts playing an animation by its executor name."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"public static void RunGraph(string executorName)\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"executorName"})," (string): The name of the GraphExecutor to run"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'// Start the intro animation\r\nGraphExecutorUtil.RunGraph("IntroAnimation");\r\n\r\n// Trigger jump animation on space key\r\nif (Input.GetKeyDown(KeyCode.Space))\r\n{\r\n    GraphExecutorUtil.RunGraph("JumpAnimation");\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"stopgraph",children:"StopGraph"}),"\n",(0,a.jsx)(e.p,{children:"Stops a currently playing animation."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"public static void StopGraph(string executorName)\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"executorName"})," (string): The name of the GraphExecutor to stop"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'// Stop the current animation\r\nGraphExecutorUtil.StopGraph("IntroAnimation");\n'})}),"\n",(0,a.jsx)(e.h3,{id:"resetgraph",children:"ResetGraph"}),"\n",(0,a.jsx)(e.p,{children:"Resets an animation to its initial state."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"public static void ResetGraph(string executorName)\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"executorName"})," (string): The name of the GraphExecutor to reset"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'// Reset animation to beginning\r\nGraphExecutorUtil.ResetGraph("IntroAnimation");\n'})}),"\n",(0,a.jsx)(e.h3,{id:"isgraphplaying",children:"IsGraphPlaying"}),"\n",(0,a.jsx)(e.p,{children:"Checks if an animation is currently playing."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"public static bool IsGraphPlaying(string executorName)\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"executorName"})," (string): The name of the GraphExecutor to check"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"bool"}),": True if the animation is playing, false otherwise"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'if (GraphExecutorUtil.IsGraphPlaying("IntroAnimation"))\r\n{\r\n    Debug.Log("Animation is still playing...");\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"getallexecutornames",children:"GetAllExecutorNames"}),"\n",(0,a.jsx)(e.p,{children:"Gets all available executor names in the current scene."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"public static string[] GetAllExecutorNames()\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"string[]"}),": Array of all executor names in the scene"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'string[] allAnimations = GraphExecutorUtil.GetAllExecutorNames();\r\nforeach (string animName in allAnimations)\r\n{\r\n    Debug.Log($"Available animation: {animName}");\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"rungraphasync",children:"RunGraphAsync"}),"\n",(0,a.jsx)(e.p,{children:"Runs an animation asynchronously and returns a coroutine."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"public static Coroutine RunGraphAsync(string executorName)\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"executorName"})," (string): The name of the GraphExecutor to run"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"Coroutine"}),": The coroutine running the animation"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Example:"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'// Start animation and wait for completion\r\nStartCoroutine(WaitForAnimation());\r\n\r\nIEnumerator WaitForAnimation()\r\n{\r\n    yield return GraphExecutorUtil.RunGraphAsync("IntroAnimation");\r\n    Debug.Log("Animation completed!");\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,a.jsx)(e.h3,{id:"basic-animation-control",children:"Basic Animation Control"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\n\r\npublic class AnimationController : MonoBehaviour\r\n{\r\n    [SerializeField] private string animationName = "MyAnimation";\r\n    \r\n    void Update()\r\n    {\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            if (GraphExecutorUtil.IsGraphPlaying(animationName))\r\n            {\r\n                GraphExecutorUtil.StopGraph(animationName);\r\n            }\r\n            else\r\n            {\r\n                GraphExecutorUtil.RunGraph(animationName);\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"animation-sequence",children:"Animation Sequence"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\nusing System.Collections;\r\n\r\npublic class AnimationSequence : MonoBehaviour\r\n{\r\n    public string[] animationSequence = {"Intro", "Main", "Outro"};\r\n    \r\n    void Start()\r\n    {\r\n        StartCoroutine(PlaySequence());\r\n    }\r\n    \r\n    IEnumerator PlaySequence()\r\n    {\r\n        foreach (string animName in animationSequence)\r\n        {\r\n            // Start animation\r\n            GraphExecutorUtil.RunGraph(animName);\r\n            \r\n            // Wait for completion\r\n            yield return new WaitUntil(() => !GraphExecutorUtil.IsGraphPlaying(animName));\r\n            \r\n            // Small delay between animations\r\n            yield return new WaitForSeconds(0.5f);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"event-driven-animation",children:"Event-Driven Animation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\n\r\npublic class EventAnimationController : MonoBehaviour\r\n{\r\n    [Header("Animation Names")]\r\n    public string onStartAnimation = "StartAnimation";\r\n    public string onPlayerDeathAnimation = "DeathAnimation";\r\n    public string onLevelCompleteAnimation = "CompleteAnimation";\r\n    \r\n    void Start()\r\n    {\r\n        // Play start animation\r\n        GraphExecutorUtil.RunGraph(onStartAnimation);\r\n    }\r\n    \r\n    public void OnPlayerDied()\r\n    {\r\n        GraphExecutorUtil.RunGraph(onPlayerDeathAnimation);\r\n    }\r\n    \r\n    public void OnLevelComplete()\r\n    {\r\n        GraphExecutorUtil.RunGraph(onLevelCompleteAnimation);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsxs)(e.p,{children:["The ",(0,a.jsx)(e.code,{children:"GraphExecutorUtil"})," includes built-in error handling:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'// This will log a warning if the executor is not found\r\nGraphExecutorUtil.RunGraph("NonExistentAnimation");\r\n// Output: [AnimatixPro] No GraphExecutor found with name: NonExistentAnimation\n'})}),"\n",(0,a.jsx)(e.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Cache Executor Names"}),": Store executor names in variables to avoid string allocation"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Check Before Playing"}),": Use ",(0,a.jsx)(e.code,{children:"IsGraphPlaying()"})," to avoid starting duplicate animations"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Use Async Methods"}),": For complex sequences, use ",(0,a.jsx)(e.code,{children:"RunGraphAsync()"})," with coroutines"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Batch Operations"}),": Group multiple animation calls together when possible"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Use Descriptive Names"}),": Choose clear, descriptive names for your executors"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Handle Errors"}),": Always check if animations exist before playing them"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Document Your Animations"}),": Keep a list of all animation names in your project"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Test Thoroughly"}),": Verify animations work correctly in different scenarios"]}),"\n"]}),"\n",(0,a.jsx)(e.h2,{id:"related-classes",children:"Related Classes"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.a,{href:"/docs/api/animatix-pro-controller",children:"AnimatixProController"})})," - MonoBehaviour wrapper for easier use"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.a,{href:"/docs/api/graph-executor",children:"GraphExecutor"})})," - The component that runs animations"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.a,{href:"/docs/api/graph-flow-asset",children:"GraphFlowAsset"})})," - The asset containing your animation graphs"]}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)("div",{className:"info-box",children:[(0,a.jsx)("h3",{children:"\ud83d\udca1 Pro Tip"}),(0,a.jsxs)("p",{children:["Use the ",(0,a.jsx)(e.code,{children:"GetAllExecutorNames()"})," method to dynamically discover all available animations in your scene, perfect for debugging and dynamic UI generation."]})]})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(h,{...n})}):h(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>l});var i=r(6540);const a={},t=i.createContext(a);function s(n){const e=i.useContext(t);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);