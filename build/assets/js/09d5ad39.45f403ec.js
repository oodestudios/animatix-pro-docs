"use strict";(self.webpackChunkanimatix_pro_docs=self.webpackChunkanimatix_pro_docs||[]).push([[864],{3973:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"examples","title":"Examples","description":"Explore real-world examples of Animatix Pro in action. These examples demonstrate various use cases and techniques you can apply to your own projects.","source":"@site/docs/examples.md","sourceDirName":".","slug":"/examples","permalink":"/animatix-pro-docs/docs/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/oode-studios/animatix-pro-docs/tree/main/docs/examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Quick Start","permalink":"/animatix-pro-docs/docs/getting-started/quick-start"}}');var a=i(4848),t=i(8453);const o={},l="Examples",s={},c=[{value:"UI Animations",id:"ui-animations",level:2},{value:"Button Click Animation",id:"button-click-animation",level:3},{value:"Menu Slide Animation",id:"menu-slide-animation",level:3},{value:"Loading Screen Animation",id:"loading-screen-animation",level:3},{value:"Camera Animations",id:"camera-animations",level:2},{value:"Smooth Camera Follow",id:"smooth-camera-follow",level:3},{value:"Cinematic Camera Sequence",id:"cinematic-camera-sequence",level:3},{value:"Game State Animations",id:"game-state-animations",level:2},{value:"Level Complete Sequence",id:"level-complete-sequence",level:3},{value:"Player Death Animation",id:"player-death-animation",level:3},{value:"Interactive Animations",id:"interactive-animations",level:2},{value:"Hover Effects",id:"hover-effects",level:3},{value:"Drag and Drop Animation",id:"drag-and-drop-animation",level:3},{value:"Performance Examples",id:"performance-examples",level:2},{value:"Animation Pooling",id:"animation-pooling",level:3},{value:"Conditional Animation",id:"conditional-animation",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Animation Chaining",id:"animation-chaining",level:3},{value:"Dynamic Animation Selection",id:"dynamic-animation-selection",level:3}];function m(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"examples",children:"Examples"})}),"\n",(0,a.jsx)(e.p,{children:"Explore real-world examples of Animatix Pro in action. These examples demonstrate various use cases and techniques you can apply to your own projects."}),"\n",(0,a.jsx)(e.h2,{id:"ui-animations",children:"UI Animations"}),"\n",(0,a.jsx)(e.h3,{id:"button-click-animation",children:"Button Click Animation"}),"\n",(0,a.jsx)(e.p,{children:"A simple button scale animation that triggers on click."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\nusing UnityEngine.UI;\r\n\r\npublic class ButtonAnimationExample : MonoBehaviour\r\n{\r\n    [SerializeField] private Button targetButton;\r\n    [SerializeField] private string animationName = "ButtonClick";\r\n    \r\n    void Start()\r\n    {\r\n        if (targetButton != null)\r\n        {\r\n            targetButton.onClick.AddListener(OnButtonClick);\r\n        }\r\n    }\r\n    \r\n    void OnButtonClick()\r\n    {\r\n        GraphExecutorUtil.RunGraph(animationName);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"GraphFlow Setup:"})}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["Create a trigger node: ",(0,a.jsx)(e.code,{children:"On Button Click"})]}),"\n",(0,a.jsxs)(e.li,{children:["Create an animation node: ",(0,a.jsx)(e.code,{children:"UI Animation > Scale"})]}),"\n",(0,a.jsx)(e.li,{children:"Connect trigger to animation"}),"\n",(0,a.jsx)(e.li,{children:"Set target to your button"}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"menu-slide-animation",children:"Menu Slide Animation"}),"\n",(0,a.jsx)(e.p,{children:"Animate a menu sliding in from the side."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\n\r\npublic class MenuController : MonoBehaviour\r\n{\r\n    [SerializeField] private string slideInAnimation = "MenuSlideIn";\r\n    [SerializeField] private string slideOutAnimation = "MenuSlideOut";\r\n    [SerializeField] private bool isMenuOpen = false;\r\n    \r\n    public void ToggleMenu()\r\n    {\r\n        if (isMenuOpen)\r\n        {\r\n            GraphExecutorUtil.RunGraph(slideOutAnimation);\r\n        }\r\n        else\r\n        {\r\n            GraphExecutorUtil.RunGraph(slideInAnimation);\r\n        }\r\n        isMenuOpen = !isMenuOpen;\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"loading-screen-animation",children:"Loading Screen Animation"}),"\n",(0,a.jsx)(e.p,{children:"Create a smooth loading screen with progress animation."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\nusing UnityEngine.UI;\r\n\r\npublic class LoadingScreen : MonoBehaviour\r\n{\r\n    [SerializeField] private string fadeInAnimation = "LoadingFadeIn";\r\n    [SerializeField] private string fadeOutAnimation = "LoadingFadeOut";\r\n    [SerializeField] private string progressAnimation = "LoadingProgress";\r\n    [SerializeField] private Slider progressBar;\r\n    \r\n    public void ShowLoading()\r\n    {\r\n        GraphExecutorUtil.RunGraph(fadeInAnimation);\r\n        StartCoroutine(UpdateProgress());\r\n    }\r\n    \r\n    IEnumerator UpdateProgress()\r\n    {\r\n        float progress = 0f;\r\n        while (progress < 1f)\r\n        {\r\n            progress += Time.deltaTime * 0.5f; // 2 seconds total\r\n            progressBar.value = progress;\r\n            yield return null;\r\n        }\r\n        \r\n        GraphExecutorUtil.RunGraph(progressAnimation);\r\n        yield return new WaitForSeconds(1f);\r\n        GraphExecutorUtil.RunGraph(fadeOutAnimation);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"camera-animations",children:"Camera Animations"}),"\n",(0,a.jsx)(e.h3,{id:"smooth-camera-follow",children:"Smooth Camera Follow"}),"\n",(0,a.jsx)(e.p,{children:"Create a smooth camera that follows a target with easing."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\n\r\npublic class CameraFollow : MonoBehaviour\r\n{\r\n    [SerializeField] private Transform target;\r\n    [SerializeField] private string followAnimation = "CameraFollow";\r\n    [SerializeField] private float followDistance = 10f;\r\n    \r\n    void Update()\r\n    {\r\n        if (target != null)\r\n        {\r\n            float distance = Vector3.Distance(transform.position, target.position);\r\n            if (distance > followDistance)\r\n            {\r\n                GraphExecutorUtil.RunGraph(followAnimation);\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"cinematic-camera-sequence",children:"Cinematic Camera Sequence"}),"\n",(0,a.jsx)(e.p,{children:"Create a cinematic sequence with multiple camera movements."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\nusing System.Collections;\r\n\r\npublic class CinematicSequence : MonoBehaviour\r\n{\r\n    [SerializeField] private string[] cameraAnimations = {\r\n        "CameraIntro",\r\n        "CameraPanLeft",\r\n        "CameraZoomIn",\r\n        "CameraOutro"\r\n    };\r\n    \r\n    void Start()\r\n    {\r\n        StartCoroutine(PlayCinematicSequence());\r\n    }\r\n    \r\n    IEnumerator PlayCinematicSequence()\r\n    {\r\n        foreach (string animName in cameraAnimations)\r\n        {\r\n            GraphExecutorUtil.RunGraph(animName);\r\n            \r\n            // Wait for animation to complete\r\n            yield return new WaitUntil(() => !GraphExecutorUtil.IsGraphPlaying(animName));\r\n            \r\n            // Pause between animations\r\n            yield return new WaitForSeconds(0.5f);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"game-state-animations",children:"Game State Animations"}),"\n",(0,a.jsx)(e.h3,{id:"level-complete-sequence",children:"Level Complete Sequence"}),"\n",(0,a.jsx)(e.p,{children:"Animate UI elements when a level is completed."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\n\r\npublic class LevelComplete : MonoBehaviour\r\n{\r\n    [SerializeField] private string levelCompleteAnimation = "LevelComplete";\r\n    [SerializeField] private string scoreAnimation = "ScoreCountUp";\r\n    [SerializeField] private string starAnimation = "StarAppear";\r\n    \r\n    public void OnLevelComplete(int score, int stars)\r\n    {\r\n        // Play level complete animation\r\n        GraphExecutorUtil.RunGraph(levelCompleteAnimation);\r\n        \r\n        // Animate score counting up\r\n        StartCoroutine(AnimateScore(score));\r\n        \r\n        // Animate stars appearing\r\n        StartCoroutine(AnimateStars(stars));\r\n    }\r\n    \r\n    IEnumerator AnimateScore(int finalScore)\r\n    {\r\n        yield return new WaitForSeconds(1f);\r\n        GraphExecutorUtil.RunGraph(scoreAnimation);\r\n        // Score counting logic would go here\r\n    }\r\n    \r\n    IEnumerator AnimateStars(int starCount)\r\n    {\r\n        yield return new WaitForSeconds(2f);\r\n        for (int i = 0; i < starCount; i++)\r\n        {\r\n            GraphExecutorUtil.RunGraph(starAnimation);\r\n            yield return new WaitForSeconds(0.3f);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"player-death-animation",children:"Player Death Animation"}),"\n",(0,a.jsx)(e.p,{children:"Create a dramatic death sequence."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\n\r\npublic class PlayerDeath : MonoBehaviour\r\n{\r\n    [SerializeField] private string deathAnimation = "PlayerDeath";\r\n    [SerializeField] private string screenShakeAnimation = "DeathScreenShake";\r\n    [SerializeField] private string fadeToBlackAnimation = "FadeToBlack";\r\n    \r\n    public void OnPlayerDeath()\r\n    {\r\n        // Play death animation\r\n        GraphExecutorUtil.RunGraph(deathAnimation);\r\n        \r\n        // Add screen shake\r\n        GraphExecutorUtil.RunGraph(screenShakeAnimation);\r\n        \r\n        // Fade to black after delay\r\n        StartCoroutine(FadeToBlack());\r\n    }\r\n    \r\n    IEnumerator FadeToBlack()\r\n    {\r\n        yield return new WaitForSeconds(2f);\r\n        GraphExecutorUtil.RunGraph(fadeToBlackAnimation);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"interactive-animations",children:"Interactive Animations"}),"\n",(0,a.jsx)(e.h3,{id:"hover-effects",children:"Hover Effects"}),"\n",(0,a.jsx)(e.p,{children:"Create interactive hover effects for UI elements."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\nusing UnityEngine.EventSystems;\r\n\r\npublic class HoverEffect : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler\r\n{\r\n    [SerializeField] private string hoverInAnimation = "HoverIn";\r\n    [SerializeField] private string hoverOutAnimation = "HoverOut";\r\n    \r\n    public void OnPointerEnter(PointerEventData eventData)\r\n    {\r\n        GraphExecutorUtil.RunGraph(hoverInAnimation);\r\n    }\r\n    \r\n    public void OnPointerExit(PointerEventData eventData)\r\n    {\r\n        GraphExecutorUtil.RunGraph(hoverOutAnimation);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"drag-and-drop-animation",children:"Drag and Drop Animation"}),"\n",(0,a.jsx)(e.p,{children:"Animate objects during drag and drop operations."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\nusing UnityEngine.EventSystems;\r\n\r\npublic class DraggableItem : MonoBehaviour, IBeginDragHandler, IDragHandler, IEndDragHandler\r\n{\r\n    [SerializeField] private string dragStartAnimation = "DragStart";\r\n    [SerializeField] private string dragEndAnimation = "DragEnd";\r\n    [SerializeField] private string dropAnimation = "DropItem";\r\n    \r\n    public void OnBeginDrag(PointerEventData eventData)\r\n    {\r\n        GraphExecutorUtil.RunGraph(dragStartAnimation);\r\n    }\r\n    \r\n    public void OnDrag(PointerEventData eventData)\r\n    {\r\n        // Drag logic here\r\n        transform.position = eventData.position;\r\n    }\r\n    \r\n    public void OnEndDrag(PointerEventData eventData)\r\n    {\r\n        if (IsValidDropZone(eventData.position))\r\n        {\r\n            GraphExecutorUtil.RunGraph(dropAnimation);\r\n        }\r\n        else\r\n        {\r\n            GraphExecutorUtil.RunGraph(dragEndAnimation);\r\n        }\r\n    }\r\n    \r\n    private bool IsValidDropZone(Vector2 position)\r\n    {\r\n        // Check if position is over a valid drop zone\r\n        return true; // Simplified for example\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"performance-examples",children:"Performance Examples"}),"\n",(0,a.jsx)(e.h3,{id:"animation-pooling",children:"Animation Pooling"}),"\n",(0,a.jsx)(e.p,{children:"Efficiently manage multiple similar animations."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\nusing System.Collections.Generic;\r\n\r\npublic class AnimationPool : MonoBehaviour\r\n{\r\n    [SerializeField] private string baseAnimationName = "Effect";\r\n    [SerializeField] private int poolSize = 10;\r\n    \r\n    private Queue<string> availableAnimations = new Queue<string>();\r\n    private HashSet<string> activeAnimations = new HashSet<string>();\r\n    \r\n    void Start()\r\n    {\r\n        // Pre-generate animation names\r\n        for (int i = 0; i < poolSize; i++)\r\n        {\r\n            availableAnimations.Enqueue($"{baseAnimationName}_{i}");\r\n        }\r\n    }\r\n    \r\n    public void PlayEffect()\r\n    {\r\n        if (availableAnimations.Count > 0)\r\n        {\r\n            string animName = availableAnimations.Dequeue();\r\n            activeAnimations.Add(animName);\r\n            \r\n            GraphExecutorUtil.RunGraph(animName);\r\n            \r\n            // Return to pool after animation completes\r\n            StartCoroutine(ReturnToPool(animName));\r\n        }\r\n    }\r\n    \r\n    IEnumerator ReturnToPool(string animName)\r\n    {\r\n        yield return new WaitUntil(() => !GraphExecutorUtil.IsGraphPlaying(animName));\r\n        \r\n        activeAnimations.Remove(animName);\r\n        availableAnimations.Enqueue(animName);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"conditional-animation",children:"Conditional Animation"}),"\n",(0,a.jsx)(e.p,{children:"Only play animations when certain conditions are met."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\n\r\npublic class ConditionalAnimation : MonoBehaviour\r\n{\r\n    [SerializeField] private string animationName = "SpecialEffect";\r\n    [SerializeField] private int requiredScore = 1000;\r\n    [SerializeField] private bool hasPlayed = false;\r\n    \r\n    public void OnScoreUpdate(int newScore)\r\n    {\r\n        if (newScore >= requiredScore && !hasPlayed)\r\n        {\r\n            GraphExecutorUtil.RunGraph(animationName);\r\n            hasPlayed = true;\r\n        }\r\n    }\r\n    \r\n    public void Reset()\r\n    {\r\n        hasPlayed = false;\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,a.jsx)(e.h3,{id:"animation-chaining",children:"Animation Chaining"}),"\n",(0,a.jsx)(e.p,{children:"Chain multiple animations together for complex sequences."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\nusing System.Collections;\r\n\r\npublic class AnimationChain : MonoBehaviour\r\n{\r\n    [System.Serializable]\r\n    public class AnimationStep\r\n    {\r\n        public string animationName;\r\n        public float delay;\r\n        public bool waitForCompletion;\r\n    }\r\n    \r\n    [SerializeField] private AnimationStep[] animationSteps;\r\n    \r\n    public void StartAnimationChain()\r\n    {\r\n        StartCoroutine(PlayAnimationChain());\r\n    }\r\n    \r\n    IEnumerator PlayAnimationChain()\r\n    {\r\n        foreach (var step in animationSteps)\r\n        {\r\n            // Wait for delay\r\n            if (step.delay > 0)\r\n            {\r\n                yield return new WaitForSeconds(step.delay);\r\n            }\r\n            \r\n            // Start animation\r\n            GraphExecutorUtil.RunGraph(step.animationName);\r\n            \r\n            // Wait for completion if required\r\n            if (step.waitForCompletion)\r\n            {\r\n                yield return new WaitUntil(() => !GraphExecutorUtil.IsGraphPlaying(step.animationName));\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"dynamic-animation-selection",children:"Dynamic Animation Selection"}),"\n",(0,a.jsx)(e.p,{children:"Choose animations based on runtime conditions."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using AnimatixPro.GraphFlow;\r\nusing UnityEngine;\r\n\r\npublic class DynamicAnimation : MonoBehaviour\r\n{\r\n    [SerializeField] private string[] animationNames = {\r\n        "Animation1", "Animation2", "Animation3"\r\n    };\r\n    \r\n    [SerializeField] private AnimationCondition[] conditions;\r\n    \r\n    [System.Serializable]\r\n    public class AnimationCondition\r\n    {\r\n        public string animationName;\r\n        public int minValue;\r\n        public int maxValue;\r\n    }\r\n    \r\n    public void PlayAnimationForValue(int value)\r\n    {\r\n        foreach (var condition in conditions)\r\n        {\r\n            if (value >= condition.minValue && value <= condition.maxValue)\r\n            {\r\n                GraphExecutorUtil.RunGraph(condition.animationName);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsxs)("div",{className:"info-box",children:[(0,a.jsx)("h3",{children:"\ud83d\udca1 Pro Tips"}),(0,a.jsxs)("ul",{children:[(0,a.jsx)("li",{children:"Use descriptive names for your animations to make them easier to manage"}),(0,a.jsx)("li",{children:"Test animations on different devices to ensure consistent performance"}),(0,a.jsx)("li",{children:"Consider using animation pooling for frequently used effects"}),(0,a.jsx)("li",{children:"Chain animations together for complex sequences"}),(0,a.jsx)("li",{children:"Always provide fallbacks for when animations fail to play"})]})]})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(m,{...n})}):m(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>l});var r=i(6540);const a={},t=r.createContext(a);function o(n){const e=r.useContext(t);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);