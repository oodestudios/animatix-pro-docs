"use strict";(self.webpackChunkanimatix_pro_docs=self.webpackChunkanimatix_pro_docs||[]).push([[864],{3973:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"examples","title":"Code Examples","description":"Real-world examples showing how to use Animatix Pro in your Unity projects.","source":"@site/docs/examples.md","sourceDirName":".","slug":"/examples","permalink":"/animatix-pro-docs/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/oodestudios/animatix-pro-docs/tree/main/docs/examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GraphExecutorUtil","permalink":"/animatix-pro-docs/api/graph-executor-util"},"next":{"title":"UI/UX Animations","permalink":"/animatix-pro-docs/examples/ui-ux-animations"}}');var a=r(4848),t=r(8453);const o={},l="Code Examples",s={},c=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Simple Animation Trigger",id:"simple-animation-trigger",level:3},{value:"UI Button Integration",id:"ui-button-integration",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Animation Sequence Controller",id:"animation-sequence-controller",level:3},{value:"Dynamic Animation Manager",id:"dynamic-animation-manager",level:3},{value:"Game State Animation Controller",id:"game-state-animation-controller",level:3},{value:"Mobile-Specific Examples",id:"mobile-specific-examples",level:2},{value:"Touch Input Animation",id:"touch-input-animation",level:3},{value:"Performance Examples",id:"performance-examples",level:2},{value:"Animation Pool Manager",id:"animation-pool-manager",level:3},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Audio-Visual Sync",id:"audio-visual-sync",level:3},{value:"Event-Driven Animation System",id:"event-driven-animation-system",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. <strong>Use Meaningful Names</strong>",id:"1-use-meaningful-names",level:3},{value:"2. <strong>Check Animation Existence</strong>",id:"2-check-animation-existence",level:3},{value:"3. <strong>Handle Errors Gracefully</strong>",id:"3-handle-errors-gracefully",level:3},{value:"4. <strong>Use Coroutines for Sequences</strong>",id:"4-use-coroutines-for-sequences",level:3},{value:"Need More Examples?",id:"need-more-examples",level:2}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"code-examples",children:"Code Examples"})}),"\n",(0,a.jsx)(e.p,{children:"Real-world examples showing how to use Animatix Pro in your Unity projects."}),"\n",(0,a.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(e.h3,{id:"simple-animation-trigger",children:"Simple Animation Trigger"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using UnityEngine;\r\nusing AnimatixPro.GraphFlow;\r\n\r\npublic class SimpleAnimationTrigger : MonoBehaviour\r\n{\r\n    void Update()\r\n    {\r\n        // Press Space to play animation\r\n        if (Input.GetKeyDown(KeyCode.Space))\r\n        {\r\n            GraphExecutorUtil.RunGraph("JumpAnimation");\r\n        }\r\n        \r\n        // Press R to reset animation\r\n        if (Input.GetKeyDown(KeyCode.R))\r\n        {\r\n            GraphExecutorUtil.ResetGraph("JumpAnimation");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"ui-button-integration",children:"UI Button Integration"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using UnityEngine;\r\nusing UnityEngine.UI;\r\nusing AnimatixPro.GraphFlow;\r\n\r\npublic class UIButtonController : MonoBehaviour\r\n{\r\n    [Header("Animation Names")]\r\n    public string playAnimation = "PlayButtonClick";\r\n    public string settingsAnimation = "SettingsButtonClick";\r\n    public string quitAnimation = "QuitButtonClick";\r\n    \r\n    public void OnPlayButtonClicked()\r\n    {\r\n        GraphExecutorUtil.RunGraph(playAnimation);\r\n    }\r\n    \r\n    public void OnSettingsButtonClicked()\r\n    {\r\n        GraphExecutorUtil.RunGraph(settingsAnimation);\r\n    }\r\n    \r\n    public void OnQuitButtonClicked()\r\n    {\r\n        GraphExecutorUtil.RunGraph(quitAnimation);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,a.jsx)(e.h3,{id:"animation-sequence-controller",children:"Animation Sequence Controller"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using UnityEngine;\r\nusing System.Collections;\r\nusing AnimatixPro.GraphFlow;\r\n\r\npublic class AnimationSequenceController : MonoBehaviour\r\n{\r\n    [Header("Animation Sequence")]\r\n    public string[] animationSequence = {\r\n        "FadeIn",\r\n        "ScaleUp", \r\n        "MoveToPosition",\r\n        "FadeOut"\r\n    };\r\n    \r\n    [Header("Settings")]\r\n    public float delayBetweenAnimations = 0.5f;\r\n    public bool loopSequence = false;\r\n    \r\n    void Start()\r\n    {\r\n        if (loopSequence)\r\n        {\r\n            StartCoroutine(PlaySequenceLoop());\r\n        }\r\n        else\r\n        {\r\n            StartCoroutine(PlaySequenceOnce());\r\n        }\r\n    }\r\n    \r\n    IEnumerator PlaySequenceOnce()\r\n    {\r\n        foreach (string animationName in animationSequence)\r\n        {\r\n            yield return StartCoroutine(PlayAndWait(animationName));\r\n            yield return new WaitForSeconds(delayBetweenAnimations);\r\n        }\r\n    }\r\n    \r\n    IEnumerator PlaySequenceLoop()\r\n    {\r\n        while (true)\r\n        {\r\n            yield return StartCoroutine(PlaySequenceOnce());\r\n        }\r\n    }\r\n    \r\n    IEnumerator PlayAndWait(string animationName)\r\n    {\r\n        GraphExecutorUtil.RunGraph(animationName);\r\n        \r\n        while (GraphExecutorUtil.IsGraphPlaying(animationName))\r\n        {\r\n            yield return null;\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"dynamic-animation-manager",children:"Dynamic Animation Manager"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using UnityEngine;\r\nusing System.Collections.Generic;\r\nusing AnimatixPro.GraphFlow;\r\n\r\npublic class DynamicAnimationManager : MonoBehaviour\r\n{\r\n    [Header("Animation Settings")]\r\n    public string[] availableAnimations;\r\n    public float animationCooldown = 1f;\r\n    \r\n    private Dictionary<string, float> lastPlayedTime = new Dictionary<string, float>();\r\n    \r\n    void Start()\r\n    {\r\n        // Get all available animations\r\n        availableAnimations = GraphExecutorUtil.GetAllExecutorNames();\r\n        \r\n        // Initialize last played times\r\n        foreach (string anim in availableAnimations)\r\n        {\r\n            lastPlayedTime[anim] = 0f;\r\n        }\r\n    }\r\n    \r\n    public bool PlayAnimation(string animationName)\r\n    {\r\n        // Check if animation exists\r\n        if (!System.Array.Exists(availableAnimations, name => name == animationName))\r\n        {\r\n            Debug.LogWarning($"Animation \'{animationName}\' not found!");\r\n            return false;\r\n        }\r\n        \r\n        // Check cooldown\r\n        if (Time.time - lastPlayedTime[animationName] < animationCooldown)\r\n        {\r\n            Debug.Log($"Animation \'{animationName}\' is on cooldown!");\r\n            return false;\r\n        }\r\n        \r\n        // Play animation\r\n        GraphExecutorUtil.RunGraph(animationName);\r\n        lastPlayedTime[animationName] = Time.time;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    public void PlayRandomAnimation()\r\n    {\r\n        if (availableAnimations.Length > 0)\r\n        {\r\n            string randomAnimation = availableAnimations[Random.Range(0, availableAnimations.Length)];\r\n            PlayAnimation(randomAnimation);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"game-state-animation-controller",children:"Game State Animation Controller"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using UnityEngine;\r\nusing AnimatixPro.GraphFlow;\r\n\r\npublic class GameStateAnimationController : MonoBehaviour\r\n{\r\n    [Header("State Animations")]\r\n    public string menuAnimation = "MenuState";\r\n    public string gameplayAnimation = "GameplayState";\r\n    public string pauseAnimation = "PauseState";\r\n    public string gameOverAnimation = "GameOverState";\r\n    \r\n    private string currentState = "Menu";\r\n    \r\n    public void ChangeState(string newState)\r\n    {\r\n        if (currentState == newState) return;\r\n        \r\n        // Stop current state animation\r\n        GraphExecutorUtil.StopGraph(GetStateAnimation(currentState));\r\n        \r\n        // Play new state animation\r\n        GraphExecutorUtil.RunGraph(GetStateAnimation(newState));\r\n        \r\n        currentState = newState;\r\n    }\r\n    \r\n    string GetStateAnimation(string state)\r\n    {\r\n        switch (state)\r\n        {\r\n            case "Menu": return menuAnimation;\r\n            case "Gameplay": return gameplayAnimation;\r\n            case "Pause": return pauseAnimation;\r\n            case "GameOver": return gameOverAnimation;\r\n            default: return "";\r\n        }\r\n    }\r\n    \r\n    // Public methods for UI buttons\r\n    public void OnPlayButtonClicked() => ChangeState("Gameplay");\r\n    public void OnPauseButtonClicked() => ChangeState("Pause");\r\n    public void OnResumeButtonClicked() => ChangeState("Gameplay");\r\n    public void OnGameOver() => ChangeState("GameOver");\r\n    public void OnMainMenuButtonClicked() => ChangeState("Menu");\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"mobile-specific-examples",children:"Mobile-Specific Examples"}),"\n",(0,a.jsx)(e.h3,{id:"touch-input-animation",children:"Touch Input Animation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using UnityEngine;\r\nusing AnimatixPro.GraphFlow;\r\n\r\npublic class TouchInputAnimation : MonoBehaviour\r\n{\r\n    [Header("Touch Settings")]\r\n    public float touchThreshold = 50f;\r\n    public string tapAnimation = "TapEffect";\r\n    public string swipeLeftAnimation = "SwipeLeft";\r\n    public string swipeRightAnimation = "SwipeRight";\r\n    \r\n    private Vector2 touchStartPos;\r\n    private Vector2 touchEndPos;\r\n    \r\n    void Update()\r\n    {\r\n        if (Input.touchCount > 0)\r\n        {\r\n            Touch touch = Input.GetTouch(0);\r\n            \r\n            if (touch.phase == TouchPhase.Began)\r\n            {\r\n                touchStartPos = touch.position;\r\n            }\r\n            else if (touch.phase == TouchPhase.Ended)\r\n            {\r\n                touchEndPos = touch.position;\r\n                ProcessTouch();\r\n            }\r\n        }\r\n    }\r\n    \r\n    void ProcessTouch()\r\n    {\r\n        float deltaX = touchEndPos.x - touchStartPos.x;\r\n        float deltaY = touchEndPos.y - touchStartPos.y;\r\n        \r\n        if (Mathf.Abs(deltaX) < touchThreshold && Mathf.Abs(deltaY) < touchThreshold)\r\n        {\r\n            // Tap\r\n            GraphExecutorUtil.RunGraph(tapAnimation);\r\n        }\r\n        else if (Mathf.Abs(deltaX) > Mathf.Abs(deltaY))\r\n        {\r\n            // Horizontal swipe\r\n            if (deltaX > 0)\r\n            {\r\n                GraphExecutorUtil.RunGraph(swipeRightAnimation);\r\n            }\r\n            else\r\n            {\r\n                GraphExecutorUtil.RunGraph(swipeLeftAnimation);\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"performance-examples",children:"Performance Examples"}),"\n",(0,a.jsx)(e.h3,{id:"animation-pool-manager",children:"Animation Pool Manager"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using UnityEngine;\r\nusing System.Collections.Generic;\r\nusing AnimatixPro.GraphFlow;\r\n\r\npublic class AnimationPoolManager : MonoBehaviour\r\n{\r\n    [Header("Pool Settings")]\r\n    public int poolSize = 10;\r\n    public string[] poolableAnimations;\r\n    \r\n    private Dictionary<string, Queue<string>> animationPools = new Dictionary<string, Queue<string>>();\r\n    \r\n    void Start()\r\n    {\r\n        InitializePools();\r\n    }\r\n    \r\n    void InitializePools()\r\n    {\r\n        foreach (string animationName in poolableAnimations)\r\n        {\r\n            Queue<string> pool = new Queue<string>();\r\n            \r\n            for (int i = 0; i < poolSize; i++)\r\n            {\r\n                string instanceName = $"{animationName}_Instance_{i}";\r\n                pool.Enqueue(instanceName);\r\n            }\r\n            \r\n            animationPools[animationName] = pool;\r\n        }\r\n    }\r\n    \r\n    public bool PlayPooledAnimation(string animationName)\r\n    {\r\n        if (!animationPools.ContainsKey(animationName))\r\n        {\r\n            Debug.LogWarning($"Animation \'{animationName}\' not in pool!");\r\n            return false;\r\n        }\r\n        \r\n        Queue<string> pool = animationPools[animationName];\r\n        \r\n        if (pool.Count > 0)\r\n        {\r\n            string instanceName = pool.Dequeue();\r\n            GraphExecutorUtil.RunGraph(instanceName);\r\n            \r\n            // Return to pool after animation finishes\r\n            StartCoroutine(ReturnToPool(animationName, instanceName));\r\n            \r\n            return true;\r\n        }\r\n        \r\n        Debug.LogWarning($"No available instances of \'{animationName}\'!");\r\n        return false;\r\n    }\r\n    \r\n    System.Collections.IEnumerator ReturnToPool(string animationName, string instanceName)\r\n    {\r\n        while (GraphExecutorUtil.IsGraphPlaying(instanceName))\r\n        {\r\n            yield return null;\r\n        }\r\n        \r\n        animationPools[animationName].Enqueue(instanceName);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,a.jsx)(e.h3,{id:"audio-visual-sync",children:"Audio-Visual Sync"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using UnityEngine;\r\nusing AnimatixPro.GraphFlow;\r\n\r\npublic class AudioVisualSync : MonoBehaviour\r\n{\r\n    [Header("Audio Settings")]\r\n    public AudioSource audioSource;\r\n    public AudioClip[] audioClips;\r\n    \r\n    [Header("Animation Settings")]\r\n    public string[] syncAnimations;\r\n    \r\n    private int currentIndex = 0;\r\n    \r\n    void Start()\r\n    {\r\n        if (audioClips.Length != syncAnimations.Length)\r\n        {\r\n            Debug.LogError("Audio clips and animations must have the same length!");\r\n            return;\r\n        }\r\n        \r\n        PlayNext();\r\n    }\r\n    \r\n    void PlayNext()\r\n    {\r\n        if (currentIndex >= audioClips.Length)\r\n        {\r\n            currentIndex = 0; // Loop\r\n        }\r\n        \r\n        // Play audio\r\n        audioSource.clip = audioClips[currentIndex];\r\n        audioSource.Play();\r\n        \r\n        // Play synchronized animation\r\n        GraphExecutorUtil.RunGraph(syncAnimations[currentIndex]);\r\n        \r\n        // Schedule next\r\n        Invoke(nameof(PlayNext), audioClips[currentIndex].length);\r\n        \r\n        currentIndex++;\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"event-driven-animation-system",children:"Event-Driven Animation System"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using UnityEngine;\r\nusing System.Collections.Generic;\r\nusing AnimatixPro.GraphFlow;\r\n\r\npublic class EventDrivenAnimationSystem : MonoBehaviour\r\n{\r\n    [System.Serializable]\r\n    public class AnimationEvent\r\n    {\r\n        public string eventName;\r\n        public string animationName;\r\n        public float delay = 0f;\r\n    }\r\n    \r\n    [Header("Animation Events")]\r\n    public AnimationEvent[] animationEvents;\r\n    \r\n    private Dictionary<string, AnimationEvent> eventMap = new Dictionary<string, AnimationEvent>();\r\n    \r\n    void Start()\r\n    {\r\n        // Build event map\r\n        foreach (var animEvent in animationEvents)\r\n        {\r\n            eventMap[animEvent.eventName] = animEvent;\r\n        }\r\n    }\r\n    \r\n    public void TriggerAnimationEvent(string eventName)\r\n    {\r\n        if (eventMap.ContainsKey(eventName))\r\n        {\r\n            var animEvent = eventMap[eventName];\r\n            \r\n            if (animEvent.delay > 0)\r\n            {\r\n                Invoke(nameof(PlayDelayedAnimation), animEvent.delay);\r\n            }\r\n            else\r\n            {\r\n                GraphExecutorUtil.RunGraph(animEvent.animationName);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Debug.LogWarning($"Animation event \'{eventName}\' not found!");\r\n        }\r\n    }\r\n    \r\n    void PlayDelayedAnimation()\r\n    {\r\n        // This would need to be modified to handle multiple delayed animations\r\n        // For simplicity, playing the first delayed animation\r\n        foreach (var animEvent in animationEvents)\r\n        {\r\n            if (animEvent.delay > 0)\r\n            {\r\n                GraphExecutorUtil.RunGraph(animEvent.animationName);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(e.h3,{id:"1-use-meaningful-names",children:["1. ",(0,a.jsx)(e.strong,{children:"Use Meaningful Names"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'// Good\r\nGraphExecutorUtil.RunGraph("MainMenuFadeIn");\r\n\r\n// Bad\r\nGraphExecutorUtil.RunGraph("Graph1");\n'})}),"\n",(0,a.jsxs)(e.h3,{id:"2-check-animation-existence",children:["2. ",(0,a.jsx)(e.strong,{children:"Check Animation Existence"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'string[] availableAnimations = GraphExecutorUtil.GetAllExecutorNames();\r\nif (System.Array.Exists(availableAnimations, name => name == "MyAnimation"))\r\n{\r\n    GraphExecutorUtil.RunGraph("MyAnimation");\r\n}\n'})}),"\n",(0,a.jsxs)(e.h3,{id:"3-handle-errors-gracefully",children:["3. ",(0,a.jsx)(e.strong,{children:"Handle Errors Gracefully"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'try\r\n{\r\n    GraphExecutorUtil.RunGraph("MyAnimation");\r\n}\r\ncatch (System.Exception e)\r\n{\r\n    Debug.LogError($"Failed to play animation: {e.Message}");\r\n}\n'})}),"\n",(0,a.jsxs)(e.h3,{id:"4-use-coroutines-for-sequences",children:["4. ",(0,a.jsx)(e.strong,{children:"Use Coroutines for Sequences"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'IEnumerator PlayAnimationSequence()\r\n{\r\n    GraphExecutorUtil.RunGraph("Animation1");\r\n    while (GraphExecutorUtil.IsGraphPlaying("Animation1"))\r\n        yield return null;\r\n        \r\n    GraphExecutorUtil.RunGraph("Animation2");\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"need-more-examples",children:"Need More Examples?"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"API Reference"}),": ",(0,a.jsx)(e.a,{href:"/docs/api/graph-executor-util",children:"GraphExecutorUtil"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Core Concepts"}),": ",(0,a.jsx)(e.a,{href:"/docs/core-concepts/graphflow-system",children:"GraphFlow System"})]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Getting Started"}),": ",(0,a.jsx)(e.a,{href:"/docs/getting-started/quick-start",children:"Quick Start Guide"})]}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>l});var i=r(6540);const a={},t=i.createContext(a);function o(n){const e=i.useContext(t);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);